Class 16 - Prompt 207 05/06/2022

-Describe event bubbling.
Event bubbling is a method of event propagation in the HTML DOM API when an event is in an element inside another element, 
and both elements have registered a handle to that event.  It is a process that starts with the element that triggered the event and then bubbles up to the containing elements in the hierarchy.

**

-Explain Function.prototype.bind()
The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of 
arguments preceding any provided when the new function is called.

Class 14 - Prompt 206 04/28/2022

-Write about something you learned this week.
Today I stared planing my project and learned little more about API.

**

-How do you see yourself growing as a web developer?
RICH! 
Best thing about being a developer is beacuse there is always somehitng new to learn. 

**

Class 12 - Prompt 205 04/29/2022

-Tell us about something you learned this week.

We learned about API, how to access and GET all the information.

**


Explain the difference between mutable and immutable objects.

A mutable object can be changed after it's created, and an immutable object can't.



Class 10 - Prompt 205 04/22/2022

Describe one thing you're learning in class today. Why do you think it will be important in your future web development journey?

Today we learned how to create Tests for you code. Thats is REALLY important to make sure everything is working how it should

**

What advantage is there for using the arrow syntax for a method in a constructor?

Function expressions are best for object methods. Arrow functions are best for callbacks or methods like map, reduce, or forEach. 
On a fundamental level, arrow functions are simply incapable of binding a value of this different from the value of this in their scope



Class 8 - Prompt 204 04/22/2022

What is the definition of a higher-order function?
A “higher-order function” is a function that accepts functions as parameters and/or returns a function. (pode colocar funcao na funcao)

**

Why should you never use new Array in JavaScript?
I saw many reasons online. Some say that loads faster. Some say is better to work. Good explanation 
https://coderwall.com/p/h4xm0w/why-never-use-new-array-in-javascript





Class 6 - Prompt 203 - 04/11/2022


What's the difference between an "attribute" and a "property"?

The attributes have a data type of string. So no matter the value of the attribute, it will always return a string. 

In contrast to the attributes, which are defined in HTML, properties belong to the DOM. 
Since DOM is an object in JavaScript, we can get and set properties.

**

What is the difference between call stack and task queue?

The call stack is responsible for keeping track of all the operations in line to be executed.
Whenever a function is finished, it is popped from the stack.


The event queue is responsible for sending new functions to the stack for processing. 
It follows the queue data structure to maintain the correct sequence in which all operations should be sent for execution.

Class 4 - Prompt 202 - 03/26/2022

What's something that's been confusing? How would you explain it to someone else?

Everything! Its even hard to explain. Its hard to know when to use what, I dont even know how to start to explain what is confusing. But I will figure it out. 

**

What actions have you personally taken on recent projects to increase maintainability of your code


I am trying to write more comments everythere explaning everything for myself in the future. 


Class 2 - Prompt 201 - 03/10/2022

Describe one thing you're learning in class today.

Today we learned about Conditionals. When to use Else, when to use Else If.
Also we learned that IF has 2 options, or its is or it isnt.
We learner about leave comments using  /** */ to help you read the code in the future. 

**

What is the difference between == and === ?

=== is a strict equality operator, it checks whether its two operands are equal, returning a Boolean result (true or false).

==  equality operator (==) checks whether its two operands are equal, returning a Boolean result. 
Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.

The most notable difference between this operator and the strict equality (===) operator is that the strict equality operator does not attempt type conversion. 
Instead, the strict equality operator always considers operands of different types to be different.


